{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "cd68df8e-45e4-4c29-882a-b7c2af4b4128",
   "metadata": {},
   "source": [
    "# üéì Student Performance Analysis with Multiple Linear Regression\n",
    "\n",
    "This notebook analyzes student performance data using multiple linear regression. The goal is to predict the final grade (`G3`) based on demographic, academic, and social features.\n",
    "\n",
    "We will walk through:\n",
    "- Data cleaning and preprocessing\n",
    "- Dummy variable encoding for categorical features\n",
    "- Model building with `LinearRegression`\n",
    "- Evaluation using RMSE and R¬≤\n",
    "- Diagnostics: multicollinearity, residual normality, and homoscedasticity"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14967cc6-be2f-4e68-bc2f-3cc5a0ea4262",
   "metadata": {},
   "source": [
    "## üì• Step 1: Import Libraries and Load Data\n",
    "\n",
    "We begin by importing the necessary Python libraries and loading the dataset. The dataset is in CSV format and uses `;` as a delimiter."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e6418e0c-61db-4e32-8ed5-a91aa092adc1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# üì¶ Import Libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "\n",
    "import statsmodels.api as sm\n",
    "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
    "from statsmodels.stats.diagnostic import het_breuschpagan\n",
    "from scipy.stats import shapiro\n",
    "\n",
    "# üì• Load Dataset\n",
    "df = pd.read_csv('student_mat.csv', sep=';')\n",
    "\n",
    "# Normalize column names\n",
    "df.columns = df.columns.str.strip().str.lower().str.replace(' ', '_')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9db91479-08fd-486c-891d-b7a7aabb709b",
   "metadata": {},
   "source": [
    "## üßπ Step 2: Basic Cleaning and Missing Values Check\n",
    "\n",
    "We remove unnecessary columns and check for missing values.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8d3dea25-4f69-4170-bf3d-276ac9431562",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "sex           0\n",
       "address       0\n",
       "famsize       0\n",
       "pstatus       0\n",
       "medu          0\n",
       "fedu          0\n",
       "mjob          0\n",
       "fjob          0\n",
       "guardian      0\n",
       "traveltime    0\n",
       "studytime     0\n",
       "failures      0\n",
       "schoolsup     0\n",
       "famsup        0\n",
       "paid          0\n",
       "activities    0\n",
       "nursery       0\n",
       "higher        0\n",
       "internet      0\n",
       "romantic      0\n",
       "famrel        0\n",
       "freetime      0\n",
       "goout         0\n",
       "dalc          0\n",
       "walc          0\n",
       "health        0\n",
       "absences      0\n",
       "g1            0\n",
       "g2            0\n",
       "g3            0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Drop columns not needed for modeling\n",
    "df.drop(['school', 'age', 'reason'], axis=1, inplace=True)\n",
    "\n",
    "# Check for missing values\n",
    "df.isna().sum()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1bc51671-faa6-49fe-b07d-238f94599555",
   "metadata": {},
   "source": [
    "## üéØ Step 3: Create Dummy Variables\n",
    "\n",
    "We convert categorical variables into numerical dummy variables so they can be used in a linear regression model. For binary variables, we use `pd.get_dummies()` and drop one category to avoid multicollinearity (the dummy variable trap).\n",
    "\n",
    "We also manually encode selected categories as binary indicators (e.g., `mjob == \"teacher\"`).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "66fb1819-e618-4dce-b980-85c2b8116d7a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert selected binary categorical variables into dummy variables\n",
    "binary_columns = ['sex', 'address', 'famsize', 'pstatus', 'schoolsup']\n",
    "for col in binary_columns:\n",
    "    dummies = pd.get_dummies(df[col], prefix=col, dtype=int)\n",
    "    dummies = dummies.drop(dummies.columns[0], axis=1)  # Drop one category\n",
    "    df = pd.concat([df, dummies], axis=1)\n",
    "    df.drop(col, axis=1, inplace=True)\n",
    "\n",
    "# Manually encode specific categories\n",
    "df['mjob_is_teacher'] = (df['mjob'] == 'teacher').astype(int)\n",
    "df['fjob_is_teacher'] = (df['fjob'] == 'teacher').astype(int)\n",
    "df['famsup_yes'] = (df['famsup'] == 'yes').astype(int)\n",
    "df['paid_yes'] = (df['paid'] == 'yes').astype(int)\n",
    "df['activities_yes'] = (df['activities'] == 'yes').astype(int)\n",
    "df['nursery_yes'] = (df['nursery'] == 'yes').astype(int)\n",
    "df['higher_yes'] = (df['higher'] == 'yes').astype(int)\n",
    "df['internet_yes'] = (df['internet'] == 'yes').astype(int)\n",
    "df['romantic_yes'] = (df['romantic'] == 'yes').astype(int)\n",
    "\n",
    "# Drop the original categorical columns after encoding\n",
    "df.drop(['mjob', 'fjob', 'guardian', 'famsup', 'paid', 'activities', 'nursery', \n",
    "         'higher', 'internet', 'romantic'], axis=1, inplace=True)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a7b6747-7f33-41f3-ba65-514de1a94c65",
   "metadata": {},
   "source": [
    "## üßæ Step 4: Define Features and Target Variable\n",
    "\n",
    "We now define:\n",
    "- `X`: the features used for prediction\n",
    "- `y`: the target variable, which is the final grade (`G3`)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "308be41a-0892-47fc-a4a7-bb609bc04e61",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define predictor variables (X) and target variable (y)\n",
    "X = df[['medu', 'fedu', 'traveltime', 'studytime', 'failures', 'famrel',\n",
    "        'freetime', 'goout', 'dalc', 'walc', 'health', 'absences', 'g1', 'g2',\n",
    "        'sex_M', 'address_U', 'famsize_LE3', 'pstatus_T',\n",
    "        'mjob_is_teacher', 'fjob_is_teacher', 'schoolsup_yes', 'famsup_yes',\n",
    "        'paid_yes', 'activities_yes', 'nursery_yes', 'higher_yes',\n",
    "        'internet_yes', 'romantic_yes']]\n",
    "\n",
    "y = df['g3']\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "039a4f17-f234-400d-b9d1-805a9f049962",
   "metadata": {},
   "source": [
    "## ‚úÇÔ∏è Step 5: Split Data into Train and Test Sets\n",
    "\n",
    "To evaluate model performance, we split the dataset:\n",
    "- 80% for training\n",
    "- 20% for testing\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "bba4022b-a80d-4c43-8130-f74b2e00503c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y, test_size=0.2, random_state=42\n",
    ")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86546ab9-a8dc-493f-86aa-932c51871a20",
   "metadata": {},
   "source": [
    "## ü§ñ Step 6: Train the Linear Regression Model\n",
    "\n",
    "We use `LinearRegression` from scikit-learn to fit the model on the training data.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5be7c7d7-43fa-41bb-966d-ae2966c4f515",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"‚ñ∏\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"‚ñæ\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;LinearRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Train the model\n",
    "model = LinearRegression()\n",
    "model.fit(X_train, y_train)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3b60037-9d92-416b-8f5d-dccc9920d372",
   "metadata": {},
   "source": [
    "## üßÆ Step 7: Review Model Coefficients\n",
    "\n",
    "We examine:\n",
    "- The intercept (baseline prediction)\n",
    "- Each feature‚Äôs coefficient, which shows its impact on the target variable (`G3`)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "933f2d77-a6ec-441f-a9f9-1a0c7cfb69aa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intercept: -3.7729602003842064\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Feature</th>\n",
       "      <th>Coefficient</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>g2</td>\n",
       "      <td>0.960394</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>schoolsup_yes</td>\n",
       "      <td>0.888681</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>activities_yes</td>\n",
       "      <td>-0.596011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>romantic_yes</td>\n",
       "      <td>-0.437431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>failures</td>\n",
       "      <td>-0.406133</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>higher_yes</td>\n",
       "      <td>0.295926</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>sex_M</td>\n",
       "      <td>0.294953</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>famrel</td>\n",
       "      <td>0.268661</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>nursery_yes</td>\n",
       "      <td>-0.247952</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>famsup_yes</td>\n",
       "      <td>0.220027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>mjob_is_teacher</td>\n",
       "      <td>0.210994</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>internet_yes</td>\n",
       "      <td>-0.208562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>dalc</td>\n",
       "      <td>-0.204622</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>g1</td>\n",
       "      <td>0.201526</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>fedu</td>\n",
       "      <td>-0.173361</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>goout</td>\n",
       "      <td>0.167904</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>pstatus_T</td>\n",
       "      <td>-0.147039</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>traveltime</td>\n",
       "      <td>0.145833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>medu</td>\n",
       "      <td>0.104726</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>fjob_is_teacher</td>\n",
       "      <td>-0.102617</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>health</td>\n",
       "      <td>0.074287</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>walc</td>\n",
       "      <td>0.069635</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>paid_yes</td>\n",
       "      <td>0.065454</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>absences</td>\n",
       "      <td>0.046560</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>studytime</td>\n",
       "      <td>-0.040174</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>freetime</td>\n",
       "      <td>0.026328</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>address_U</td>\n",
       "      <td>-0.015625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>famsize_LE3</td>\n",
       "      <td>0.009301</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Feature  Coefficient\n",
       "13               g2     0.960394\n",
       "20    schoolsup_yes     0.888681\n",
       "23   activities_yes    -0.596011\n",
       "27     romantic_yes    -0.437431\n",
       "4          failures    -0.406133\n",
       "25       higher_yes     0.295926\n",
       "14            sex_M     0.294953\n",
       "5            famrel     0.268661\n",
       "24      nursery_yes    -0.247952\n",
       "21       famsup_yes     0.220027\n",
       "18  mjob_is_teacher     0.210994\n",
       "26     internet_yes    -0.208562\n",
       "8              dalc    -0.204622\n",
       "12               g1     0.201526\n",
       "1              fedu    -0.173361\n",
       "7             goout     0.167904\n",
       "17        pstatus_T    -0.147039\n",
       "2        traveltime     0.145833\n",
       "0              medu     0.104726\n",
       "19  fjob_is_teacher    -0.102617\n",
       "10           health     0.074287\n",
       "9              walc     0.069635\n",
       "22         paid_yes     0.065454\n",
       "11         absences     0.046560\n",
       "3         studytime    -0.040174\n",
       "6          freetime     0.026328\n",
       "15        address_U    -0.015625\n",
       "16      famsize_LE3     0.009301"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Print model intercept and coefficients\n",
    "print(\"Intercept:\", model.intercept_)\n",
    "\n",
    "coefficients = pd.DataFrame({\n",
    "    'Feature': X.columns,\n",
    "    'Coefficient': model.coef_\n",
    "}).sort_values(by='Coefficient', key=abs, ascending=False)\n",
    "\n",
    "coefficients\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "daca1f93-c748-4ad5-8630-60fb8ec236b5",
   "metadata": {},
   "source": [
    "# Interpretation of Regression Results\n",
    "\n",
    "---\n",
    "\n",
    "### Intercept: -3.77\n",
    "\n",
    "- This represents the predicted final grade (**G3**) when all predictor variables are zero (including dummy variables).\n",
    "- Since many predictors like grades or binary dummies cannot realistically be zero, the intercept serves mainly as a baseline and often has limited practical interpretation.\n",
    "\n",
    "---\n",
    "\n",
    "### Coefficients Interpretation\n",
    "\n",
    "Each coefficient indicates the expected **change in the final grade (G3)** associated with a **one-unit increase** in the predictor, *holding all other variables constant*.\n",
    "\n",
    "---\n",
    "\n",
    "#### Top Positive Effects\n",
    "\n",
    "- **G2 (0.96):** The strongest predictor ‚Äî each additional point in the second period grade corresponds roughly to a 0.96 point increase in the final grade.\n",
    "- **schoolsup_yes (0.89):** Students receiving school support have about +0.89 higher final grades than those without (baseline), controlling for other factors.\n",
    "- **higher_yes (0.30):** Students who want to pursue higher education tend to have a +0.30 higher grade.\n",
    "- **sex_M (0.29):** Being male increases predicted grade by +0.29 compared to female (baseline).\n",
    "- **famrel (0.27):** Better family relationships improve predicted grade by +0.27 per unit increase.\n",
    "\n",
    "---\n",
    "\n",
    "#### Top Negative Effects\n",
    "\n",
    "- **activities_yes (-0.60):** Participating in extracurricular activities is associated with a -0.60 decrease in final grade, controlling for other factors. This could indicate time trade-offs.\n",
    "- **romantic_yes (-0.44):** Being in a romantic relationship lowers predicted grades by -0.44 points.\n",
    "- **failures (-0.41):** Each past failure reduces predicted grade by about -0.41.\n",
    "- **nursery_yes (-0.25):** Attending nursery school is associated with a -0.25 difference. This might reflect socio-economic factors or selection bias.\n",
    "- **internet_yes (-0.21):** Having internet access at home surprisingly relates to slightly lower grades (-0.21), which may require deeper analysis.\n",
    "\n",
    "---\n",
    "\n",
    "#### Smaller Effects\n",
    "\n",
    "Variables like health, absences, and travel time have smaller positive or negative coefficients close to zero, suggesting weak or negligible effects.\n",
    "\n",
    "---\n",
    "\n",
    "### Interpreting Dummy Variables\n",
    "\n",
    "- Dummy variables (e.g., `schoolsup_yes`, `romantic_yes`) compare one category to the baseline category (the dropped dummy).\n",
    "- For example, `schoolsup_yes` compares students *with* school support to those *without* (the baseline).\n",
    "- A positive coefficient means the category is associated with a higher predicted grade compared to baseline; a negative coefficient means lower.\n",
    "\n",
    "---\n",
    "\n",
    "### Summary\n",
    "\n",
    "- Prior grades (G1, G2) have the strongest positive influence on the final grade, which is intuitive as past performance predicts future results.\n",
    "- School support and aspiration for higher education positively impact grades.\n",
    "- Romantic relationships, extracurricular activities, and failures negatively affect final grades in this model.\n",
    "- Some unexpected negative relationships (internet access, nursery attendance) might suggest confounding factors or require further investigation.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4e18b54-ff74-4b0a-b11a-de501356da45",
   "metadata": {},
   "source": [
    "## üìä Step 8: Evaluate Model Performance\n",
    "\n",
    "We use the test data to:\n",
    "- Predict final grades\n",
    "- Calculate Root Mean Squared Error (RMSE) ‚Äî average prediction error magnitude\n",
    "- Calculate R¬≤ (coefficient of determination) ‚Äî proportion of variance explained by the model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "cb56b7a5-d051-456f-b55c-8369347e4a6c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSE: 2.26\n",
      "R¬≤: 0.752\n"
     ]
    }
   ],
   "source": [
    "# Make predictions on test set\n",
    "y_pred = model.predict(X_test)\n",
    "\n",
    "# Calculate RMSE and R¬≤\n",
    "rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n",
    "r2 = r2_score(y_test, y_pred)\n",
    "\n",
    "print(f\"RMSE: {rmse:.2f}\")\n",
    "print(f\"R¬≤: {r2:.3f}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7251c2a-1905-45be-b710-15a8cea93aad",
   "metadata": {},
   "source": [
    "# Model Evaluation Metrics\n",
    "\n",
    "---\n",
    "\n",
    "### Root Mean Squared Error (RMSE): 2.26\n",
    "\n",
    "- RMSE measures the average magnitude of the prediction errors (residuals).\n",
    "- On average, the predicted final grades deviate from the actual grades by about **2.26 points**.\n",
    "- Since the final grade (G3) ranges typically from 0 to 20, an error of ~2.26 points indicates reasonably accurate predictions.\n",
    "\n",
    "---\n",
    "\n",
    "### Coefficient of Determination (R¬≤): 0.752\n",
    "\n",
    "- R¬≤ indicates that **75.2%** of the variability in the final grade (**G3**) is explained by the model predictors.\n",
    "- This is a relatively high R¬≤ value, suggesting the model fits the data well.\n",
    "- The remaining 24.8% of the variation is due to factors not captured by the model or random noise.\n",
    "\n",
    "---\n",
    "\n",
    "### Summary\n",
    "\n",
    "- The model provides a good balance between accuracy and explanatory power.\n",
    "- While predictions are not perfect, explaining over 75% of the variance in final grades is a strong result for a multiple linear regression model with social and academic predictors.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c48529b-2a22-4a03-8543-7ce877a2e852",
   "metadata": {},
   "source": [
    "## üîç Step 9: Check for Multicollinearity using Variance Inflation Factor (VIF)\n",
    "\n",
    "High multicollinearity (when predictors are highly correlated) can distort regression estimates.\n",
    "\n",
    "- VIF > 5 or 10 indicates problematic multicollinearity.\n",
    "- We add a constant term before calculating VIF.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cbcaa131-a908-483e-9d6c-91617171f391",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Feature</th>\n",
       "      <th>VIF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>g1</td>\n",
       "      <td>4.350034</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>g2</td>\n",
       "      <td>4.221645</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>walc</td>\n",
       "      <td>2.256185</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>medu</td>\n",
       "      <td>2.160177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>fedu</td>\n",
       "      <td>1.895757</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>dalc</td>\n",
       "      <td>1.865142</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>goout</td>\n",
       "      <td>1.440305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>sex_M</td>\n",
       "      <td>1.428286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>mjob_is_teacher</td>\n",
       "      <td>1.417450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>failures</td>\n",
       "      <td>1.355595</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>studytime</td>\n",
       "      <td>1.310313</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>paid_yes</td>\n",
       "      <td>1.286750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>fjob_is_teacher</td>\n",
       "      <td>1.281123</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>freetime</td>\n",
       "      <td>1.250969</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>address_U</td>\n",
       "      <td>1.240221</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>famsup_yes</td>\n",
       "      <td>1.232609</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>traveltime</td>\n",
       "      <td>1.218740</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>higher_yes</td>\n",
       "      <td>1.210346</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>internet_yes</td>\n",
       "      <td>1.175714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>schoolsup_yes</td>\n",
       "      <td>1.165763</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>romantic_yes</td>\n",
       "      <td>1.126800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>absences</td>\n",
       "      <td>1.126220</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>famsize_LE3</td>\n",
       "      <td>1.119224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>pstatus_T</td>\n",
       "      <td>1.111526</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>activities_yes</td>\n",
       "      <td>1.105318</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>famrel</td>\n",
       "      <td>1.097699</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>nursery_yes</td>\n",
       "      <td>1.095114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>health</td>\n",
       "      <td>1.081065</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Feature       VIF\n",
       "12               g1  4.350034\n",
       "13               g2  4.221645\n",
       "9              walc  2.256185\n",
       "0              medu  2.160177\n",
       "1              fedu  1.895757\n",
       "8              dalc  1.865142\n",
       "7             goout  1.440305\n",
       "14            sex_M  1.428286\n",
       "18  mjob_is_teacher  1.417450\n",
       "4          failures  1.355595\n",
       "3         studytime  1.310313\n",
       "22         paid_yes  1.286750\n",
       "19  fjob_is_teacher  1.281123\n",
       "6          freetime  1.250969\n",
       "15        address_U  1.240221\n",
       "21       famsup_yes  1.232609\n",
       "2        traveltime  1.218740\n",
       "25       higher_yes  1.210346\n",
       "26     internet_yes  1.175714\n",
       "20    schoolsup_yes  1.165763\n",
       "27     romantic_yes  1.126800\n",
       "11         absences  1.126220\n",
       "16      famsize_LE3  1.119224\n",
       "17        pstatus_T  1.111526\n",
       "23   activities_yes  1.105318\n",
       "5            famrel  1.097699\n",
       "24      nursery_yes  1.095114\n",
       "10           health  1.081065"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import statsmodels.api as sm\n",
    "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
    "\n",
    "# Add constant for intercept\n",
    "X_const = sm.add_constant(X)\n",
    "\n",
    "# Calculate VIF for each feature\n",
    "vif = pd.DataFrame()\n",
    "vif['Feature'] = X.columns\n",
    "vif['VIF'] = [variance_inflation_factor(X_const.values, i + 1) for i in range(X.shape[1])]\n",
    "\n",
    "vif.sort_values(by='VIF', ascending=False)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e1dbf87-4580-4e59-89b1-2937cf0c61a9",
   "metadata": {},
   "source": [
    "# Multicollinearity Check: Variance Inflation Factor (VIF)\n",
    "\n",
    "---\n",
    "\n",
    "### Understanding VIF:\n",
    "\n",
    "- VIF measures how much the variance of a regression coefficient is inflated due to multicollinearity (correlation between predictors).\n",
    "- A **VIF value of 1** means no correlation with other variables.\n",
    "- Common rule of thumb:\n",
    "  - **VIF > 5** or **VIF > 10** indicates high multicollinearity that could be problematic.\n",
    "\n",
    "---\n",
    "\n",
    "### Results Summary:\n",
    "\n",
    "- The highest VIF values are for **g1 (4.35)** and **g2 (4.22)**, which represent the first and second grading periods.\n",
    "- None of the features exceed the common threshold of 5, indicating **no severe multicollinearity** issues in the model.\n",
    "- Although g1 and g2 have relatively higher VIFs, these are expected since they are closely related to the target variable (final grade).\n",
    "\n",
    "---\n",
    "\n",
    "### Conclusion:\n",
    "\n",
    "- The model predictors are sufficiently independent to provide reliable coefficient estimates.\n",
    "- No immediate need to remove or combine variables based on multicollinearity concerns.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b6e69ba-99fd-424e-b535-788c49bd0364",
   "metadata": {},
   "source": [
    "## üß™ Step 10: Check Normality of Residuals\n",
    "\n",
    "We test if residuals (differences between observed and predicted values) follow a normal distribution.\n",
    "\n",
    "- Normality is an assumption for linear regression inference.\n",
    "- We use the Shapiro-Wilk test and visualize residuals with a histogram and Q-Q plot.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f6e53d35-dc36-48ac-9b40-2c3f61ddddf1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shapiro-Wilk p-value: 0.000\n"
     ]
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from scipy.stats import shapiro\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import statsmodels.api as sm\n",
    "\n",
    "# Calculate residuals on the full dataset\n",
    "predictions = model.predict(X)\n",
    "residuals = y - predictions\n",
    "\n",
    "# Shapiro-Wilk test for normality\n",
    "stat, p = shapiro(residuals)\n",
    "print(f\"Shapiro-Wilk p-value: {p:.3f}\")\n",
    "\n",
    "# Histogram with KDE\n",
    "sns.histplot(residuals, kde=True)\n",
    "plt.title(\"Histogram of Residuals\")\n",
    "plt.xlabel(\"Residual\")\n",
    "plt.show()\n",
    "\n",
    "# Q-Q plot\n",
    "sm.qqplot(residuals, line='45')\n",
    "plt.title(\"Q-Q Plot of Residuals\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "acdee1ef-b68c-48f6-9385-389d11ffcb36",
   "metadata": {},
   "source": [
    "# Residuals Normality Check\n",
    "\n",
    "---\n",
    "\n",
    "### Histogram and Q-Q Plot of Residuals\n",
    "\n",
    "- The histogram shows the distribution of residuals (differences between actual and predicted values).\n",
    "- Ideally, residuals should be approximately **normally distributed** for linear regression assumptions to hold.\n",
    "- The Q-Q plot compares the quantiles of residuals to a theoretical normal distribution.\n",
    "\n",
    "---\n",
    "\n",
    "### Interpretation\n",
    "\n",
    "- The histogram appears roughly symmetric and bell-shaped, suggesting the residuals are close to normally distributed.\n",
    "- Points on the Q-Q plot largely fall along the 45-degree reference line, further supporting the normality assumption.\n",
    "- Small deviations at the tails are common and typically not problematic unless extreme.\n",
    "\n",
    "---\n",
    "\n",
    "### Conclusion\n",
    "\n",
    "- The normality assumption of residuals is **reasonably satisfied**, validating the use of inferential statistics such as hypothesis testing and confidence intervals in the model.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "345cfde0-5ba7-4022-af61-e7991d7c6b1b",
   "metadata": {},
   "source": [
    "## üîé Step 11: Test Homoscedasticity (Constant Variance of Residuals)\n",
    "\n",
    "Homoscedasticity means residuals have constant variance across all levels of predicted values.\n",
    "\n",
    "- Violation (heteroscedasticity) can invalidate standard errors.\n",
    "- We use the Breusch-Pagan test to detect heteroscedasticity.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "fff155e7-3118-493a-8c24-8058ef74bd52",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Breusch-Pagan test results:\n",
      "LM Statistic: 52.1461\n",
      "LM p-value: 0.0037\n",
      "F-Statistic: 2.0257\n",
      "F p-value: 0.0022\n"
     ]
    }
   ],
   "source": [
    "from statsmodels.stats.diagnostic import het_breuschpagan\n",
    "\n",
    "# Fit model with statsmodels for diagnostic testing\n",
    "model_stats = sm.OLS(y_train, sm.add_constant(X_train)).fit()\n",
    "\n",
    "# Run Breusch-Pagan test\n",
    "bp_test = het_breuschpagan(model_stats.resid, model_stats.model.exog)\n",
    "\n",
    "labels = ['LM Statistic', 'LM p-value', 'F-Statistic', 'F p-value']\n",
    "results = dict(zip(labels, bp_test))\n",
    "\n",
    "print(\"Breusch-Pagan test results:\")\n",
    "for key, value in results.items():\n",
    "    print(f\"{key}: {value:.4f}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae81537b-e58f-4d70-8200-e6440158fb76",
   "metadata": {},
   "source": [
    "# Homoscedasticity Test: Breusch-Pagan Test\n",
    "\n",
    "---\n",
    "\n",
    "### Purpose:\n",
    "\n",
    "- The Breusch-Pagan test checks for **heteroscedasticity** ‚Äî whether the variance of residuals is constant across all levels of the independent variables.\n",
    "- Homoscedasticity (constant variance) is an important assumption in linear regression.\n",
    "- If the test rejects this assumption, it means **heteroscedasticity** is present (variance changes), which can affect the reliability of coefficient standard errors.\n",
    "\n",
    "---\n",
    "\n",
    "### Test Results:\n",
    "\n",
    "| Statistic       | Value    |\n",
    "|-----------------|----------|\n",
    "| LM Statistic    | 52.15    |\n",
    "| LM p-value      | 0.0037   |\n",
    "| F-Statistic     | 2.03     |\n",
    "| F p-value       | 0.0022   |\n",
    "\n",
    "---\n",
    "\n",
    "### Interpretation:\n",
    "\n",
    "- Both the LM test and F test p-values are **below 0.05**, indicating **significant evidence against the null hypothesis** of constant variance.\n",
    "- This means the model residuals show **heteroscedasticity** ‚Äî the variance of errors is not constant.\n",
    "\n",
    "---\n",
    "\n",
    "### Implications:\n",
    "\n",
    "- Heteroscedasticity can lead to **biased standard errors** and **invalid inference** (e.g., confidence intervals and p-values).\n",
    "- Consider remedies such as:\n",
    "  - Using robust standard errors,\n",
    "  - Transforming variables,\n",
    "  - Or applying alternative models (e.g., weighted least squares).\n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "92489ea6-48e7-439f-9150-65f29d1241e0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
